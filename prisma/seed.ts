import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...");

  // T·∫°o ng∆∞·ªùi d√πng m·∫´u
  const passwordHash = await bcrypt.hash("123456", 12);

  const user = await prisma.user.upsert({
    where: { email: "student@gmail.com" },
    update: {},
    create: {
      email: "student@gmail.com",
      fullName: "Nguy·ªÖn VƒÉn An",
      passwordHash,
      role: "student",
    },
  });

  console.log("‚úÖ ƒê√£ t·∫°o ng∆∞·ªùi d√πng:", user.email);

  // T·∫°o c√°c danh m·ª•c
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { userId_name: { userId: user.id, name: "üìö H·ªçc t·∫≠p" } },
      update: {},
      create: {
        userId: user.id,
        name: "üìö H·ªçc t·∫≠p",
        color: "#3B82F6",
      },
    }),
    prisma.category.upsert({
      where: { userId_name: { userId: user.id, name: "üé≠ Ngo·∫°i kh√≥a" } },
      update: {},
      create: {
        userId: user.id,
        name: "üé≠ Ngo·∫°i kh√≥a",
        color: "#10B981",
      },
    }),
    prisma.category.upsert({
      where: { userId_name: { userId: user.id, name: "üë§ C√° nh√¢n" } },
      update: {},
      create: {
        userId: user.id,
        name: "üë§ C√° nh√¢n",
        color: "#F59E0B",
      },
    }),
    prisma.category.upsert({
      where: { userId_name: { userId: user.id, name: "üíº Th·ª±c t·∫≠p" } },
      update: {},
      create: {
        userId: user.id,
        name: "üíº Th·ª±c t·∫≠p",
        color: "#8B5CF6",
      },
    }),
    prisma.category.upsert({
      where: { userId_name: { userId: user.id, name: "üèÉ‚Äç‚ôÇÔ∏è Th·ªÉ thao" } },
      update: {},
      create: {
        userId: user.id,
        name: "üèÉ‚Äç‚ôÇÔ∏è Th·ªÉ thao",
        color: "#EF4444",
      },
    }),
  ]);

  console.log("‚úÖ ƒê√£ t·∫°o danh m·ª•c:", categories.length);

  // T·∫°o c√°c task m·∫´u ƒëa d·∫°ng
  const now = new Date();
  const tomorrow = new Date(now);
  tomorrow.setDate(tomorrow.getDate() + 1);

  const nextWeek = new Date(now);
  nextWeek.setDate(nextWeek.getDate() + 7);

  const yesterday = new Date(now);
  yesterday.setDate(yesterday.getDate() - 1);

  const tasks = await Promise.all([
    // H·ªçc t·∫≠p - ∆Øu ti√™n cao, ƒëang l√†m
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[0].id,
        title: "Ho√†n th√†nh b√†i t·∫≠p To√°n cao c·∫•p - Ch∆∞∆°ng 3",
        description:
          "Gi·∫£i c√°c b√†i t·∫≠p t·ª´ 3.1 ƒë·∫øn 3.15 v·ªÅ t√≠ch ph√¢n v√† ·ª©ng d·ª•ng. Chu·∫©n b·ªã cho ki·ªÉm tra gi·ªØa k·ª≥.",
        priority: "HIGH",
        status: "IN_PROGRESS",
        deadlineAt: tomorrow,
        estimateMinutes: 180,
      },
    }),

    // H·ªçc t·∫≠p - ∆Øu ti√™n cao, qu√° h·∫°n
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[0].id,
        title: "N·ªôp b√°o c√°o th·ª±c h√†nh C∆° s·ªü d·ªØ li·ªáu",
        description:
          "Thi·∫øt k·∫ø v√† tri·ªÉn khai h·ªá th·ªëng qu·∫£n l√Ω th∆∞ vi·ªán v·ªõi MySQL. Bao g·ªìm ERD, database v√† queries.",
        priority: "HIGH",
        status: "INCOMPLETE",
        deadlineAt: yesterday,
        estimateMinutes: 300,
      },
    }),

    // H·ªçc t·∫≠p - Ho√†n th√†nh
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[0].id,
        title: "L√†m b√†i t·∫≠p l·∫≠p tr√¨nh Web - React.js",
        description:
          "T·∫°o ·ª©ng d·ª•ng Todo App s·ª≠ d·ª•ng React, Redux v√† Material-UI",
        priority: "MEDIUM",
        status: "COMPLETED",
        deadlineAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000),
        completedAt: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000),
        estimateMinutes: 240,
      },
    }),

    // H·ªçc t·∫≠p - √în thi
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[0].id,
        title: "√în t·∫≠p m√¥n Thu·∫≠t to√°n v√† C·∫•u tr√∫c d·ªØ li·ªáu",
        description:
          "√în l·∫°i c√°c thu·∫≠t to√°n s·∫Øp x·∫øp, t√¨m ki·∫øm, c√¢y nh·ªã ph√¢n, v√† graph. L√†m b√†i t·∫≠p tr√™n LeetCode.",
        priority: "HIGH",
        status: "INCOMPLETE",
        deadlineAt: new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000),
        estimateMinutes: 360,
      },
    }),

    // H·ªçc t·∫≠p - ƒê·ªçc t√†i li·ªáu
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[0].id,
        title: "ƒê·ªçc paper v·ªÅ Machine Learning",
        description:
          "ƒê·ªçc v√† t√≥m t·∫Øt paper 'Deep Learning for Natural Language Processing' cho m√¥n AI",
        priority: "MEDIUM",
        status: "INCOMPLETE",
        deadlineAt: nextWeek,
        estimateMinutes: 150,
      },
    }),

    // Ngo·∫°i kh√≥a - CLB
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[1].id,
        title: "H·ªçp CLB L·∫≠p tr√¨nh - K·∫ø ho·∫°ch Hackathon",
        description:
          "Th·∫£o lu·∫≠n k·∫ø ho·∫°ch t·ªï ch·ª©c cu·ªôc thi Hackathon 2024. Ph√¢n c√¥ng nhi·ªám v·ª• v√† timeline.",
        priority: "MEDIUM",
        status: "INCOMPLETE",
        deadlineAt: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000),
        estimateMinutes: 120,
      },
    }),

    // Ngo·∫°i kh√≥a - S·ª± ki·ªán
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[1].id,
        title: "Chu·∫©n b·ªã presentation cho Tech Talk",
        description:
          "Chu·∫©n b·ªã slides v·ªÅ 'Modern Web Development v·ªõi React v√† TypeScript' cho bu·ªïi tech talk c·ªßa CLB",
        priority: "HIGH",
        status: "IN_PROGRESS",
        deadlineAt: new Date(now.getTime() + 4 * 24 * 60 * 60 * 1000),
        estimateMinutes: 180,
      },
    }),

    // Th·ª±c t·∫≠p
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[3].id,
        title: "Ho√†n th√†nh d·ª± √°n th·ª±c t·∫≠p - Module thanh to√°n",
        description:
          "Ph√°t tri·ªÉn module thanh to√°n online t√≠ch h·ª£p VNPay v√† MoMo cho ·ª©ng d·ª•ng e-commerce",
        priority: "HIGH",
        status: "IN_PROGRESS",
        deadlineAt: new Date(now.getTime() + 10 * 24 * 60 * 60 * 1000),
        estimateMinutes: 480,
      },
    }),

    // Th·ª±c t·∫≠p - B√°o c√°o
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[3].id,
        title: "Vi·∫øt b√°o c√°o tu·∫ßn th·ª±c t·∫≠p",
        description:
          "T·ªïng k·∫øt c√¥ng vi·ªác tu·∫ßn n√†y: API development, database optimization, code review",
        priority: "MEDIUM",
        status: "INCOMPLETE",
        deadlineAt: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000),
        estimateMinutes: 90,
      },
    }),

    // C√° nh√¢n - S·ª©c kh·ªèe
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[2].id,
        title: "Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥",
        description:
          "ƒê·∫∑t l·ªãch v√† ƒëi kh√°m s·ª©c kh·ªèe t·∫°i b·ªánh vi·ªán ƒê·∫°i h·ªçc Y H√† N·ªôi",
        priority: "MEDIUM",
        status: "INCOMPLETE",
        deadlineAt: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000),
        estimateMinutes: 180,
      },
    }),

    // C√° nh√¢n - K·ªπ nƒÉng
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[2].id,
        title: "H·ªçc ti·∫øng Nh·∫≠t - B√†i 15",
        description:
          "H·ªçc t·ª´ v·ª±ng v√† ng·ªØ ph√°p b√†i 15 trong s√°ch Minna no Nihongo. Luy·ªán t·∫≠p h·ªôi tho·∫°i.",
        priority: "LOW",
        status: "INCOMPLETE",
        estimateMinutes: 60,
      },
    }),

    // C√° nh√¢n - T√†i ch√≠nh
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[2].id,
        title: "L·∫≠p k·∫ø ho·∫°ch chi ti√™u th√°ng 9",
        description:
          "T√≠nh to√°n h·ªçc ph√≠, ti·ªÅn ƒÉn, ti·ªÅn thu√™ nh√† v√† c√°c chi ph√≠ kh√°c. Ti·∫øt ki·ªám cho m√°y laptop m·ªõi.",
        priority: "MEDIUM",
        status: "COMPLETED",
        deadlineAt: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000),
        completedAt: new Date(now.getTime() - 4 * 24 * 60 * 60 * 1000),
        estimateMinutes: 45,
      },
    }),

    // Th·ªÉ thao
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[4].id,
        title: "T·∫≠p gym - Chest & Triceps",
        description:
          "T·∫≠p luy·ªán nh√≥m c∆° ng·ª±c v√† tay sau. Bench press, dips, tricep extension.",
        priority: "LOW",
        status: "COMPLETED",
        deadlineAt: now,
        completedAt: new Date(now.getTime() - 2 * 60 * 60 * 1000),
        estimateMinutes: 90,
      },
    }),

    // Th·ªÉ thao - ƒêƒÉng k√Ω
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[4].id,
        title: "ƒêƒÉng k√Ω gi·∫£i b√≥ng ƒë√° khoa CNTT",
        description:
          "ƒêƒÉng k√Ω tham gia gi·∫£i b√≥ng ƒë√° tranh c√∫p khoa C√¥ng ngh·ªá th√¥ng tin 2024",
        priority: "MEDIUM",
        status: "INCOMPLETE",
        deadlineAt: new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000),
        estimateMinutes: 30,
      },
    }),

    // H·ªçc t·∫≠p - D·ª± √°n nh√≥m
    prisma.task.create({
      data: {
        userId: user.id,
        categoryId: categories[0].id,
        title: "Meeting nh√≥m d·ª± √°n Software Engineering",
        description:
          "H·ªçp nh√≥m th·∫£o lu·∫≠n ti·∫øn ƒë·ªô d·ª± √°n qu·∫£n l√Ω sinh vi√™n. Review code v√† ph√¢n c√¥ng task m·ªõi.",
        priority: "HIGH",
        status: "INCOMPLETE",
        deadlineAt: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000),
        estimateMinutes: 120,
      },
    }),
  ]);

  console.log("‚úÖ ƒê√£ t·∫°o tasks:", tasks.length);

  // T·∫°o activity logs chi ti·∫øt
  await prisma.activityLog.createMany({
    data: [
      {
        userId: user.id,
        action: "task_completed",
        meta: { taskId: tasks[2].id, taskTitle: tasks[2].title },
        createdAt: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000),
      },
      {
        userId: user.id,
        action: "task_completed",
        meta: { taskId: tasks[11].id, taskTitle: tasks[11].title },
        createdAt: new Date(now.getTime() - 4 * 24 * 60 * 60 * 1000),
      },
      {
        userId: user.id,
        action: "task_completed",
        meta: { taskId: tasks[12].id, taskTitle: tasks[12].title },
        createdAt: new Date(now.getTime() - 2 * 60 * 60 * 1000),
      },
      {
        userId: user.id,
        action: "task_created",
        meta: { taskId: tasks[0].id, taskTitle: tasks[0].title },
        createdAt: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000),
      },
      {
        userId: user.id,
        action: "task_updated",
        meta: {
          taskId: tasks[6].id,
          taskTitle: tasks[6].title,
          changes: ["status"],
        },
        createdAt: new Date(now.getTime() - 6 * 60 * 60 * 1000),
      },
    ],
  });

  console.log("‚úÖ ƒê√£ t·∫°o activity logs");
  console.log("üéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!");
  console.log("");
  console.log("üìä Th·ªëng k√™ d·ªØ li·ªáu ƒë√£ t·∫°o:");
  console.log(`   üë§ Users: 1`);
  console.log(`   üìÇ Categories: ${categories.length}`);
  console.log(`   ‚úÖ Tasks: ${tasks.length}`);
  console.log(`   üìù Activity Logs: 5`);
  console.log("");
  console.log("üîê T√†i kho·∫£n test:");
  console.log("   üìß Email: student@gmail.com");
  console.log("   üîë Password: 123456");
  console.log("");
  console.log("üìã C√°c lo·∫°i task ƒë∆∞·ª£c t·∫°o:");
  console.log("   üî¥ HIGH Priority: 6 tasks");
  console.log("   üü° MEDIUM Priority: 6 tasks");
  console.log("   üü¢ LOW Priority: 3 tasks");
  console.log("");
  console.log("üìà Tr·∫°ng th√°i tasks:");
  console.log("   ‚è≥ INCOMPLETE: 10 tasks");
  console.log("   üîÑ IN_PROGRESS: 3 tasks");
  console.log("   ‚úÖ COMPLETED: 2 tasks");
  console.log("");
  console.log("üè∑Ô∏è Danh m·ª•c tasks:");
  console.log("   üìö H·ªçc t·∫≠p: 7 tasks");
  console.log("   üé≠ Ngo·∫°i kh√≥a: 2 tasks");
  console.log("   üë§ C√° nh√¢n: 3 tasks");
  console.log("   üíº Th·ª±c t·∫≠p: 2 tasks");
  console.log("   üèÉ‚Äç‚ôÇÔ∏è Th·ªÉ thao: 1 tasks");
}

main()
  .catch((e) => {
    console.error("‚ùå Seed failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
