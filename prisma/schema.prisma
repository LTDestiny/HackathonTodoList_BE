// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  fullName     String   @map("full_name")
  passwordHash String   @map("password_hash")
  role         String   @default("student")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  tasks        Task[]
  categories   Category[]
  activityLogs ActivityLog[]

  @@map("users")
}

model Category {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  color     String   @default("#3B82F6")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@unique([userId, name])
  @@map("categories")
}

model Task {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  categoryId      String?   @map("category_id")
  title           String
  description     String?
  priority        Priority  @default(MEDIUM)
  status          Status    @default(INCOMPLETE)
  deadlineAt      DateTime? @map("deadline_at")
  estimateMinutes Int?      @map("estimate_minutes")
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("tasks")
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Status {
  INCOMPLETE
  IN_PROGRESS
  COMPLETED
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  action    String
  meta      Json?    // Back to Json type for PostgreSQL
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

// Using strings instead of enums for SQLite compatibility
// Priority: "HIGH" | "MEDIUM" | "LOW"  
// Status: "INCOMPLETE" | "IN_PROGRESS" | "COMPLETED"
